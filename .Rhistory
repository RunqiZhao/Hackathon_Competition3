install.packages("tidyverse")
install.packages("ggplo2")
install.packages("ggplot2")
install.packages("igraph")
install.packages("arm")
install.packages("magrittr")
install.packages("stringr")
install.packages("boot")
install.packages("xgboost")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinycssloaders")
install.packages("plotly")
install.packages("DT")
install.packages("reshape2")
install.packages("ALEPlot")
install.packages("devtools")
install.packages("ggpubr")
install.packages("xgboostExplainer")
install.packages("ya")
install.packages("yaImpute")
y <- c(-43.6, 3.3, -12.4, 7.6, 11.4, 5.9, -4.5, 22.7, -14.4, -28.3)
x1 <- c(27, 33, 27, 24, 31, 40, 15, 26, 22, 23)
x2 <- c(34, 30, 33, 11, 16, 30, 17, 12, 21, 27)
n <- length(y)
n
n <- length(x1)
n
n <- length(y)
n
X <- matrix(c(rep(1, n), x1, x2), ncol = 3, byrow = FALSE)
X
diag(10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
y <- c(-43.6, 3.3, -12.4, 7.6, 11.4, 5.9, -4.5, 22.7, -14.4, -28.3)
x1 <- c(27, 33, 27, 24, 31, 40, 15, 26, 22, 23)
x2 <- c(34, 30, 33, 11, 16, 30, 17, 12, 21, 27)
n <- length(y)
p <- 2
# Estimation of beta
X <- matrix(c(rep(1, n), x1, x2), ncol = p+1, byrow = F)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
beta_hat
# Estimation of sigma2
sigma2_hat <- sum((y - X %*% beta_hat)^2) / (n-p-1)
sigma2_hat
sqrt(sigma2_hat)
fit <- lm(y ~ x1 + x2)
summary(fit)
y <- c(-43.6, 3.3, -12.4, 7.6, 11.4, 5.9, -4.5, 22.7, -14.4, -28.3)
x1 <- c(27, 33, 27, 24, 31, 40, 15, 26, 22, 23)
x2 <- c(34, 30, 33, 11, 16, 30, 17, 12, 21, 27)
n <- length(y)
p <- 2
# Estimation of beta
X <- matrix(c(rep(1, n), x1, x2), ncol = p+1, byrow = F)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
beta_hat
# Estimation of sigma2
sigma2_hat <- sum((y - X %*% beta_hat)^2) / (n-p-1)
sigma2_hat
sqrt(sigma2_hat)
fit <- lm(y ~ x1 + x2)
summary(fit)
X %*% solve(t(X) %*% X) %*% t(X)
X %*% solve(t(X) %*% X) %*% t(X) -> H
M <- diag(10) - H
M %*% H
shiny::runApp('Documents/BU/Semiconductor Shiny/app')
adj1 <- matrix(c(0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0), nrow = 4)
library(igraph)
g.adj1 <- graph.adjacency(adj1, mode = "undirected")
plot(g.adj1)
?igraph
transitivity(g.adj1, type="local")# local clustering
transitivity(g.adj1, type="average") #average clustering
transitivity(g.adj1)# global clustering: the ratio of the triangles
setwd("/Users/rongli/Documents/BU/AD616/Hackathons")
df.main <- read.csv("ba_main.csv")
df.certs <- read.csv("ba_certs.csv")
df.skills <- read.csv("ba_skills.csv")
unique(df.certs$Certification)
unique(df.skills$Skill)
nrow(unique(df.skills$Skill))
length(unique(df.skills$Skill))
length(unique(df.skills$SkillCluster))
View(df.main)
unique(df.main$CanonTitle)
cbind()
?cbind()
?merge
length(unique(df.skills$BGTJobId))
length(unique(df.main$BGTJobId))
length(unique(df.certs$BGTJobId))
length(unique(df.certs$BGTJobId))
setwd("/Users/rongli/Documents/BU/AD616/Hackathons/Hackathon_Competition3")
load("combined_data.rData")
load("combined_data.rData")
library(tidyverse)
library(magrittr)
job %>% group_by(State, Skill) %>% summarise(n = count(BGTJobId))
job %>% group_by(State, Skill) %>% summarise(n = n(BGTJobId))
job %>% group_by(State, Skill) %>% summarise(n = n())
skill <- job %>% group_by(State, Skill) %>% summarise(n = n())
skill[[1]]
skill[1]
skill[2]
skill[[2]]
skill <- job %>% group_by(State, Skill) %>% summarise(n = n()) %>% arrange(state, -n)
skill <- job %>% group_by(State, Skill) %>% summarise(n = n()) %>% arrange(State, -n)
View(skill)
shiny::runApp('Problem3')
runApp('MA615_final_project-main/Shiny/jobs')
runApp()
getwd()
load("combined_data.rData")
knitr::opts_chunk$set(echo = FALSE)
library(DT)
View(skill)
knitr::opts_chunk$set(echo = FALSE)
library(DT)
library(magrittr)
df.skill <- job %>% group_by(State, Skill) %>% summarise(n = n()) %>% arrange(State, -n)
rm(skill)
??arrange
??summarise
library(dplyr)
load("combined_data.rData")
inputPanel(
selectInput("states", label = "Select a state:",
choices = unique(job$State), selected = "Arkansas"),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
df.skill <- job %>% group_by(State, Skill) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(State, -n)
DT::renderDataTable({df.skill[State == input$states, ]})
# renderPlot({
#   hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
#        xlab = "Duration (minutes)", main = "Geyser eruption duration")
#
#   dens <- density(faithful$eruptions, adjust = input$bw_adjust)
#   lines(dens, col = "blue")
# })
??renderDataTable
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd('C:\\Users\\13127\\Desktop\\datasets\\Hackathon_Competition3')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd('/Users/rongli/Documents/BU/AD616/Hackathons/Hackathon_Competition3')
load('combined_data.rData')
job_skill <- job %>% group_by(State,Skill) %>% summarise(n=n()) %>% arrange(State,-n)
job_certi <- job %>% group_by(State,Certification) %>% summarise(n=n()) %>% arrange(State,-n)
job_skill <- job %>% group_by(State,Skill) %>% summarise(n=n()) %>% arrange(State,-n)
job_certi <- job %>% group_by(State,Certification) %>% summarise(n=n()) %>% arrange(State,-n)
job_skill <- job %>% dplyr::group_by(State,Skill) %>% summarise(n=n()) %>% arrange(State,-n)
job_skill <- job %>% dplyr::group_by(State,Skill) %>% dplyr::summarise(n=n()) %>% arrange(State,-n)
job_skill <- job %>% group_by(State,Skill) %>% summarise(n=n()) %>% arrange(State,-n)
job_certi <- job %>% group_by(State,Certification) %>% summarise(n=n()) %>% arrange(State,-n)
View(job_certi)
